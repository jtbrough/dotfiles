{{ if or (eq .chezmoi.os "linux") (eq .chezmoi.os "darwin") -}}
#!/bin/bash

# Linux and macOS-specific script for exporting Bitwarden secrets
echo "Running on Linux or macOS..."
if ! command -v bw >/dev/null 2>&1; then
    echo "Bitwarden CLI (bw) is not installed. Exiting."
    exit 1
fi

# Check if a Bitwarden session is active
if ! bw sync >/dev/null 2>&1; then
    echo "No active Bitwarden session found. Please log in."

    # Prompt for Client ID and Secret
    read -p "Enter your Bitwarden server URL: " BW_SERVERURL 
    read -p "Enter your Bitwarden Client ID: " BW_CLIENTID
    read -p "Enter your Bitwarden Client Secret: " BW_CLIENTSECRET
    echo

    # Export the credentials as environment variables
    export BW_CLIENTID
    export BW_CLIENTSECRET

    # Log in using the API key
    bw config server $BW_SERVERURL
    export BW_SESSION=$(bw login --apikey && bw unlock --raw)
    if [ -z "$BW_SESSION" ]; then
        echo "Failed to log in to Bitwarden. Exiting."
        exit 1
    fi
fi

# Sync Bitwarden
bw sync
echo "BW sync complete"

# Ensure the target directory exists
mkdir -p ~/.config/age

# Fetch the "key.txt.age" attachment from the secure note titled "Age Key"
ATTACHMENT_CONTENT="{{- bitwardenAttachmentByRef "key.txt.age" "item" "Age Key" -}}"
if [ -z "$ATTACHMENT_CONTENT" ]; then
    echo "Failed to retrieve the attachment 'key.txt.age'. Exiting."
    exit 1
fi

# Write the content to the file
printf "%s" "$ATTACHMENT_CONTENT" > ~/.config/age/key.txt.age
chmod 600 ~/.config/age/key.txt.age
echo "Saved 'key.txt.age' to ~/.config/age/key.txt.age"

chmod 600 ~/.config/age/key.txt.age
echo "Saved 'key.txt.age' to ~/.config/age/key.txt.age"

{{ else if eq .chezmoi.os "windows" -}}
# PowerShell script for Windows
Write-Host "Running on Windows..."

# Ensure Bitwarden CLI is installed
if (-not (Get-Command bw -ErrorAction SilentlyContinue)) {
    Write-Host "Bitwarden CLI (bw) is not installed. Exiting."
    exit 1
}

# Check if a Bitwarden session is active
if (-not (bw sync -ErrorAction SilentlyContinue)) {
    Write-Host "No active Bitwarden session found. Please log in."

    # Prompt for Client ID and Secret
    $BW_SERVERURL = Read-Host "Enter your Bitwarden server URL"
    $BW_CLIENTID = Read-Host "Enter your Bitwarden Client ID"
    $BW_CLIENTSECRET = Read-Host "Enter your Bitwarden Client Secret"

    # Set environment variables
    [System.Environment]::SetEnvironmentVariable("BW_CLIENTID", $BW_CLIENTID, "Process")
    [System.Environment]::SetEnvironmentVariable("BW_CLIENTSECRET", $BW_CLIENTSECRET, "Process")

    # Log in using the API key
    bw config server $BW_SERVERURL
    $BW_SESSION = bw login --apikey | Select-String -Pattern "export BW_SESSION" | ForEach-Object { ($_ -split '"')[1] }
    if (-not $BW_SESSION) {
        Write-Host "Failed to log in to Bitwarden. Exiting."
        exit 1
    }
    $env:BW_SESSION = $BW_SESSION
}

# Sync Bitwarden
bw sync
Write-Host "BW sync complete"

# Ensure the target directory exists
$AgeKeyPath = "$HOME\.config\age\key.txt.age"
New-Item -ItemType Directory -Force -Path (Split-Path $AgeKeyPath) | Out-Null

# Fetch the "key.txt.age" attachment from the secure note titled "Age Key"
$AttachmentContent = @"
{{- bitwardenAttachmentByRef "key.txt.age" "item" "Age Key" -}}
"@
if (-not $AttachmentContent) {
    Write-Host "Failed to retrieve the attachment 'key.txt.age'. Exiting."
    exit 1
}

# Write the content to the file
$AttachmentContent | Set-Content -Path $AgeKeyPath -Force
Write-Host "Saved 'key.txt.age' to $AgeKeyPath"


Write-Host "Saved 'key.txt.age' to $AgeKeyPath"

{{ else -}}
#!/bin/bash
# Unsupported OS
echo "Unsupported operating system. Exiting."
exit 1
{{ end }}